(defun ever-note-filename (note)
  (concat (join (cons (cdr (assq 'title note)) (cdr (assq 'tags note))) "_") "." (cdr (assq 'ext note))))
(defun ever-note-dir (note)
  (file-name-directory (ever-note-path note)))
(defun ever-note-path (note)
  (expand-file-name (ever-note-relpath note) ever-root-directroy))
(defun ever-note-relpath (note)
  (join (append (cdr (assq 'category note)) (list (ever-note-filename note))) "/"))
(defun ever-note-reldir (note)
  (join (cdr (assq 'category note)) "/"))
(defun ever-note-mark (note)
  (cdr (assq 'mark note)))
(defun ever-note-updated (note)
  (cdr (assq 'updated note)))
(defun ever-note-category (note)
  (cdr (assq 'category note)))
(defun ever-note-title (note)
  (cdr (assq 'title note)))
(defun ever-note-ext (note)
  (cdr (assq 'ext note)))
(defun ever-note-tags (note)
  (let ((str (file-name-sans-extension (ever-note-filename note))))
    (if (not (string-match "^[^_]+_\\(.+\\)$" str))
      nil
    (remove "" (split-string (match-string 1 str) "_")))))
(defun ever-update-note (new old)
  "Override old elements if duplicated"
  (let ((keys (mapcar 'car new)))
    (append (filter (lambda (e) (not (member (car e) keys))) old) new)))

(provide 'ever-note)